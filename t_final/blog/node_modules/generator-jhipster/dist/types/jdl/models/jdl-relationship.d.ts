/**
 * Copyright 2013-2023 the original author or authors from the JHipster project.
 *
 * This file is part of the JHipster project, see https://www.jhipster.tech/
 * for more information.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { RelationshipSide, JDLRelationshipType } from '../basic-types/relationships.js';
export type JDLRelationshipOptions = Record<'global' | 'source' | 'destination', Record<string, any>>;
export type JDLRelationshipModel = {
    side: RelationshipSide | undefined;
    from: string;
    to: string;
    type: JDLRelationshipType;
    options: JDLRelationshipOptions;
    injectedFieldInFrom: null | string;
    injectedFieldInTo: null | string;
    isInjectedFieldInFromRequired: boolean;
    isInjectedFieldInToRequired: boolean;
    commentInFrom: null | string;
    commentInTo: null | string;
};
export default class JDLRelationship implements JDLRelationshipModel {
    side: RelationshipSide | undefined;
    from: string;
    to: string;
    type: JDLRelationshipType;
    options: {
        global: Record<string, any>;
        source: Record<string, any>;
        destination: Record<string, any>;
    };
    injectedFieldInFrom: null | string;
    injectedFieldInTo: null | string;
    isInjectedFieldInFromRequired: boolean;
    isInjectedFieldInToRequired: boolean;
    commentInFrom: null | string;
    commentInTo: null | string;
    constructor(args: Partial<JDLRelationshipModel> & Pick<JDLRelationshipModel, 'from' | 'to' | 'type'>);
    /**
     * Returns a constructed ID representing this relationship.
     * @return {String} the relationship's id.
     */
    getId(): string;
    hasGlobalOption(option: string): boolean;
    forEachGlobalOption(passedFunction: (optionName: string, value: any) => void): void;
    forEachSourceOption(passedFunction: (optionName: string, value: any) => void): void;
    forEachDestinationOption(passedFunction: (optionName: string, value: any) => void): void;
    toString(): string;
}
